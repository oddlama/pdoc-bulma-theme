{% extends "frame.html.jinja2" %}
{% block title %}{{ module.modulename }} API documentation{% endblock %}
{% block style %}
	{{ super() | safe }}
    {% filter minify_css %}
        <style>{% include 'syntax-highlighting.css' %}</style>
        <style>.pdoc-is-private {display: none; }</style>
    {% endfilter %}
{% endblock %}
{% defaultmacro bases(cls) %}
    {%- if cls.bases -%}
        <wbr>(
        {%- for base in cls.bases -%}
            <span class="base">{{ base[:2] | link(text=base[2]) }}</span>
            {%- if loop.nextitem %}, {% endif %}
        {%- endfor -%}
        )
    {%- endif -%}
{% enddefaultmacro %}
{% defaultmacro default_value(var) -%}
    {%- if var.default_value_str -%}
        <span class="default_value">{{ var.default_value_str | escape | linkify }}</span>
    {%- endif -%}
{% enddefaultmacro %}
{% defaultmacro annotation(var) %}
    {%- if var.annotation_str -%}
        <span class="annotation">{{ var.annotation_str | escape | linkify }}</span>
    {%- endif -%}
{% enddefaultmacro %}
{% defaultmacro decorators(doc) %}
    {% for d in doc.decorators if not d.startswith("@_") %}
        <div class="decorator">{{ d }}</div>
    {% endfor %}
{% enddefaultmacro %}
{% defaultmacro headerlink(doc) -%}
    <a class="headerlink" href="#{{ doc.qualname }}">#&nbsp;&nbsp</a>
{% enddefaultmacro %}
{% defaultmacro function(fn) -%}
    <div class="attr function">{{ headerlink(fn) }}
        {{ decorators(fn) }}
        {% if fn.name == "__init__" %}
            <span class="name">{{ ".".join(fn.qualname.split(".")[:-1]) }}</span>
            {#- no space -#}
            <span class="signature">{{ fn.signature_without_self | escape | linkify }}</span>
        {% else %}
            <span class="def">{{ fn.funcdef }}</span>
            <span class="name">{{ fn.name }}</span>
            {#- no space -#}
            <span class="signature">{{ fn.signature | escape | linkify }}</span>:
        {% endif %}
    </div>
{% enddefaultmacro %}
{% defaultmacro variable(var) %}
    <div class="attr variable">{{ headerlink(var) }}
        <span class="name">{{ var.name }}</span>{{ annotation(var) }}{{ default_value(var) }}
    </div>
{% enddefaultmacro %}
{% defaultmacro submodule(mod) %}
    <div class="attr module">{{ headerlink(mod) }}<span class="name">{{ mod.taken_from | link }}</span></div>
{% enddefaultmacro %}
{% defaultmacro class(cls) %}
    <div class="attr class">
        {{ headerlink(cls) }}
        {{ decorators(cls) }}
        <span class="def">class</span>
        <span class="name">{{ cls.qualname }}</span>
        {{- bases(cls) -}}:
    </div>
{% enddefaultmacro %}
{% defaultmacro member(doc) %}
    {% if doc.type == "class" %}
        {{ class(doc) }}
    {% elif doc.type == "function" %}
        {{ function(doc) }}
    {% elif doc.type == "module" %}
        {{ submodule(doc) }}
    {% else %}
        {{ variable(doc) }}
    {% endif %}
    {% if doc.type != "variable" %}
        {{ view_source(doc) }}
    {% endif %}
    {{ docstring(doc) }}
{% enddefaultmacro %}
{% defaultmacro docstring(var) %}
    {% if var.docstring %}
        <div class="docstring">{{ var.docstring | to_markdown | to_html | linkify(namespace=var.qualname) }}</div>
    {% endif %}
{% enddefaultmacro %}
{% defaultmacro is_public(doc) %}
	{# This macro has an unfortunate naming, and the name is hard-coded into
	some internal logic. Our intention is to have is_public return true
	for all symbols that should be documented. is_private then used to determine
	whether the symbol is part of the public API or the internal one. #}
    {#
    This macro is a bit unconventional in that its output is not rendered, but treated as a boolean:
    Returning no text is interpreted as false, returning any other text is iterpreted as true.
    Implementing this as a macro makes it very easy to override with a custom template..
    #}
    {% if not doc.name.startswith("__") %}
        {# members not starting with two underscores are considered public by default #}
        true
    {% elif doc.name == "__init__" %}
        {# the constructor is our special case which we also treat as public #}
        true
    {% elif doc.name == "__doc__" %}
        {# Sometimes we have __doc__ in __all__, which we want to exclude for pdoc's purposes. #}
        {# https://github.com/mitmproxy/pdoc/issues/235 #}
    {% elif doc.qualname is in(module.obj.__all__ or []) %}
        {# members are still public if mentioned in __all__ #}
        true
    {% endif %}
{% enddefaultmacro %}
{% defaultmacro is_private(doc) %}
	{# members starting with an underscore are private, except for __init__ #}
    {% if doc.name == "__init__" %}
    {% elif doc.name.startswith("_") %}
        true
    {% endif %}
{% enddefaultmacro %}
{# fmt: off #}
{% defaultmacro inherited(cls) %}
    {% for base, members in cls.inherited_members.items() %}
        {% set m = None %}{# workaround for https://github.com/pallets/jinja/issues/1427 #}
        {% set member_html %}
            {% for m in members if is_public(m) | trim %}
                <dd id="{{ m.qualname }}" class="{{ m.type }}">
                    {{- m.taken_from | link(text=m.name.replace("__init__",base[1])) -}}
                </dd>
            {% endfor %}
        {% endset %}
        {# we may not have any public members, in which case we don't want to print anything. #}
        {% if member_html %}
            <div><dt>{{ base | link }}</dt>
                {{ member_html }}
            </div>
        {% endif %}
    {% endfor %}
{% enddefaultmacro %}
{# fmt: on #}
{% defaultmacro view_source(doc) %}
    {% if show_source and doc.source %}
        <details>
            <summary>View Source</summary>
            {{ doc.source | highlight }}
        </details>
    {% endif %}
{% enddefaultmacro %}
{% defaultmacro module_name() %}
    <h1 class="modulename">
        {% set parts = module.modulename.split(".") %}
        {% for part in parts %}
            {%- set fullname = ".".join(parts[:loop.index]) -%}
            {%- if fullname in all_modules and fullname != module.modulename -%}
                <a href="./{{ "../" * loop.revindex0 }}{{ part }}.html">{{ part }}</a>
            {%- else -%}
                {{ part }}
            {%- endif -%}
            {%- if loop.nextitem -%}
                <wbr>.
            {%- endif -%}
        {% endfor %}
    </h1>
{% enddefaultmacro %}
{% defaultmacro icontext(icon, name, classes=None) -%}
    <span class="icon-text is-flex-wrap-nowrap{{(" " + classes) if classes else "" }}">
        <span class="icon"><i class="{{icon}}"></i></span>
		<span>{{name}}</span>
    </span>
{% enddefaultmacro %}
{% defaultmacro symbol_icontext(doc, name=None) -%}
	{% if doc.type == "module" %}
		{% set icon = "fa-solid fa-cubes" %}
		{% set dname = doc.qualname or doc.name %}
	{% elif doc.type == "variable" %}
		{% set icon = "fa-solid fa-dice-d6" %}
		{% set dname = doc.name %}
	{% elif doc.type == "function" %}
		{% if doc.name == "__init__" %}
			{% set icon = "fa-regular fa-circle-dot" %}
			{% set dname = doc.qualname.split(".")[-2] %}
		{% else %}
			{% set icon = "fa-solid fa-circle-dot" %}
			{% set dname = doc.name %}
		{% endif %}
	{% elif doc.type == "class" %}
		{% set icon = "fa-solid fa-diagram-project" %}
		{% set dname = doc.name %}
	{% else %}
		{% set icon = "fa-solid fa-circle-question" %}
		{% set dname = doc.name %}
	{% endif %}
	{% set classes = ["is-family-monospace"] %}
	{% if is_private(doc) %}
		{% set _ = classes.append("has-text-grey-light") %}
	{% endif %}
	<span class="icon-text is-flex-wrap-nowrap {{' '.join(classes)}}">
        <span class="icon"><i class="{{icon}}"></i></span>
		<span>{{name or dname}}</span>
		{% if doc.type == "function" %}
			<span class="has-text-grey-light">()</span>
		{% endif %}
    </span>
{% enddefaultmacro %}
{% defaultmacro navlist(xs, label=None) -%}
    {% if xs %}
        {% if label %}
        <p class="menu-label">{{ label }}</p>
        {% endif %}
        <ul class="menu-list p-0 m-0">
            {% for m in xs %}
                {{ caller(m) }}
            {% endfor %}
        </ul>
    {% endif %}
{%- enddefaultmacro %}
{% defaultmacro member_navlist_filter(members, type, sort=None, label=None, parent=None, nestlevel=0) -%}
	{% set xs = [] %}
	{% for x in members if x.type == type and is_public(x) %}
		{% set _ = xs.append(x) %}
	{% endfor %}
    {% if sort %}
		{% set xs = xs | sort(attribute=sort) %}
	{% endif %}
    {% if xs %}
        {% if label and nestlevel == 0 %}
			<p class="menu-label">{{ label }}</p>
        {% endif %}
        <ul class="menu-list p-0 m-0 {{ "ml-5" if nestlevel > 0 else "" }}" style="border: 0">
            {% for x in xs %}
                {{ caller(x) }}
            {% endfor %}
        </ul>
    {% endif %}
{%- enddefaultmacro %}
{% defaultmacro hide_private(doc) -%}
	{{ 'pdoc-is-private' if is_private(doc) else '' }}
{%- enddefaultmacro %}
{% defaultmacro member_navlist(xs, parent=None, nestlevel=0) -%}
    {% call(m) member_navlist_filter(xs, type="module", sort="name", label="Modules", parent=parent, nestlevel=nestlevel) %}
        <li class="{{ hide_private(m) }}"><a href="#{{ m.name }}" class="p-1">{{ symbol_icontext(m) }}</a></li>
    {% endcall %}

    {% call(m) member_navlist_filter(xs, type="variable", label="Variables", parent=parent, nestlevel=nestlevel) %}
        <li class="{{ hide_private(m) }}"><a href="#{{ m.qualname }}" class="p-1">{{ symbol_icontext(m) }}</a></li>
    {% endcall %}

    {% call(m) member_navlist_filter(xs, type="function", sort="name", label="Functions", parent=parent, nestlevel=nestlevel) %}
        <li class="{{ hide_private(m) }}"><a href="#{{ m.qualname }}" class="p-1">{{ symbol_icontext(m) }}</a></li>
    {% endcall %}

    {% call(m) member_navlist_filter(xs, type="class", sort="name", label="Classes", parent=parent, nestlevel=nestlevel) %}
		<li class="{{ hide_private(m) }}">
			<a href="#{{ m.qualname }}" class="p-1">{{ symbol_icontext(m) }}</a>
            {{ member_navlist(m.own_members, parent=m, nestlevel=nestlevel+1) }}
        </li>
    {% endcall %}
{%- enddefaultmacro %}
{% macro define_nav() -%}
	{% block nav %}
		<nav class="menu" style="position: sticky; vertical-align: top; max-height: 100vh; overflow-y: auto; top: 0; bottom: 0; padding: 30px;">
			<div>
				{% block nav_module_list_link %}
					{% set parentmodule = ".".join(module.modulename.split(".")[:-1]) %}
					{% if parentmodule and parentmodule in all_modules %}
						<a class="pdoc-button module-list-button" href="../{{ parentmodule.split(".")[-1] }}.html">
							{% include "box-arrow-in-left.svg" %}
							&nbsp;
							{{- parentmodule -}}
						</a>
					{% elif all_modules|length > 1 %}
						<a class="pdoc-button module-list-button" href="{{ "../" * module.modulename.count(".") }}index.html">
							{% include "box-arrow-in-left.svg" %}
							&nbsp;
							Module Index
						</a>
					{% endif %}
				{% endblock %}

				{% block nav_title %}
					{% if logo %}
						{% if logo_link %}<a href="{{ logo_link }}">{% endif %}
						<img src="{{ logo }}" class="logo" alt="project logo"/>
						{% if logo_link %}</a>{% endif %}
					{% endif %}
				{% endblock %}

				{% block nav_search_box %}
					{% if search and all_modules|length > 1 %}
						<p class="control has-icons-right">
							<input class="input" type="search" placeholder="Search..." required>
							<span class="icon is-small is-right">
								<i class="fa-solid fa-magnifying-glass"></i>
							</span>
						</p>
					{% endif %}
				{% endblock %}

				{% block nav_module_contents %}
					{# TODO: Test this #}
					{% set index = module.docstring | to_markdown | to_html | attr("toc_html") %}
					{% if index %}
						<p class="menu-label">Contents</p>
						{{ index | safe }}
					{% endif %}
				{% endblock %}

				{% block nav_submodules %}
					{% call(m) navlist(module.submodules, label="Submodules") %}
						{# TODO: This is really awful. But we require a better link() function to solve it. #}
						{# TODO: Maybe only use normal name not qualname? #}
						{% set lnk = m.taken_from | link %}
						{% set a_tag, rest = lnk.split('">') %}
						{% set _, href = a_tag.split('href="') %}
						{% set name, _ = rest.split('</a>') %}
						<li class="{{ hide_private(m) }}"><a href="{{ href }}" class="p-1">{{ symbol_icontext(m, name=name) }}</a></li>
					{% endcall %}
				{% endblock %}

				{% block nav_member_list %}
					{{ member_navlist(module.members.values()) }}
				{% endblock %}

				{% block nav_footer %}
					{% if footer_text %}
					<footer>{{ footer_text }}</footer>
					{% endif %}
				{% endblock %}

				{{ attribution() }}
			</div>
		</nav>
	{% endblock %}
{%- endmacro %}
{% block head %}
    {% if math %}{% include "math.html.jinja2" %}{% endif %}
{% endblock %}
{% block body %}
    <div class="columns is-fullheight">
		<div class="column is-4">
			{{ define_nav() }}
		</div>
		<main class="column">
			{% block module_info %}
				<section>
					{% block edit_button %}
						{% if edit_url %}
							<a class="pdoc-button git-button" href="{{ edit_url }}">Edit on GitHub</a>
						{% endif %}
					{% endblock %}
					{{ module_name() }}
					{{ docstring(module) }}
					{{ view_source(module) }}
				</section>
			{% endblock %}
			{% block module_contents %}
				{% for m in module.flattened_own_members if is_public(m) | trim %}
					<section id="{{ m.qualname or m.name }}">
						{{ member(m) }}
						{% if m.type == "class" %}
							{% for m in m.own_members if m.type != "class" and is_public(m) | trim %}
								<div id="{{ m.qualname }}" class="classattr">
									{{ member(m) }}
								</div>
							{% endfor %}
							{% set inherited_members = inherited(m) | trim %}
							{% if inherited_members %}
								<div class="inherited">
									<h5>Inherited Members</h5>
									<dl>
										{{ inherited_members }}
									</dl>
								</div>
							{% endif %}
						{% endif %}
					</section>
				{% endfor %}
			{% endblock %}
		</main>
	</div>
    {% if mtime %}
        {% include "livereload.html.jinja2" %}
    {% endif %}
    {% block search_js %}
        {% if search and all_modules|length > 1 %}
            {% include "search.html.jinja2" %}
        {% endif %}
    {% endblock %}
{% endblock %}
