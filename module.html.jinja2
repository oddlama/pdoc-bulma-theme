{# TODO: dark theme switch in top navbar that scrolls away? #}
{% extends "frame.html.jinja2" %}
{% block title %}{{ module.modulename }} API documentation{% endblock %}
{% block style %}
	{{ super() | safe }}
    {% filter minify_css %}
        <style>{% include 'syntax-highlighting.css' %}</style>
		<style>
		{# TODO: this is shit do it in scss #}
		.pdoc-is-private {display: none; }
		pre.definition {
			font-size: 0.85rem !important;
		}
  .button.is-white-transparent {
    background-color: transparent;
    border-color: transparent;
    color: #0a0a0a; }
    .button.is-white-transparent:hover, .button.is-white-transparent.is-hovered {
      background-color: #f9f9f9;
      border-color: transparent;
      color: #0a0a0a; }
    .button.is-white-transparent:focus, .button.is-white-transparent.is-focused {
      border-color: transparent;
      color: #0a0a0a; }
      .button.is-white-transparent:focus:not(:active), .button.is-white-transparent.is-focused:not(:active) {
        box-shadow: 0 0 0 0.125em rgba(255, 255, 255, 0.25); }
    .button.is-white-transparent:active, .button.is-white-transparent.is-active {
      background-color: #f2f2f2;
      border-color: transparent;
      color: #0a0a0a; }
		</style>
    {% endfilter %}
{% endblock %}
{% defaultmacro bases(cls) %}
    {%- if cls.bases -%}
        <wbr>(
        {%- for base in cls.bases -%}
            <span class="base">{{ base[:2] | link(text=base[2]) }}</span>
            {%- if loop.nextitem %}, {% endif %}
        {%- endfor -%}
        )
    {%- endif -%}
{% enddefaultmacro %}
{% defaultmacro default_value(var) -%}
    {%- if var.default_value_str -%}
        <span class="default_value">{{ var.default_value_str | escape | linkify }}</span>
    {%- endif -%}
{% enddefaultmacro %}
{% defaultmacro annotation(var) %}
    {%- if var.annotation_str -%}
        <span class="annotation">{{ var.annotation_str | escape | linkify }}</span>
    {%- endif -%}
{% enddefaultmacro %}
{% defaultmacro decorators(doc) %}
    {%- for d in doc.decorators if not d.startswith("@_") -%}
        <div class="decorator">{{ d | escape | linkify }}</div>
    {%- endfor -%}
{% enddefaultmacro %}
{% defaultmacro headerlink(doc) -%}
    <a class="headerlink" href="#{{ doc.qualname }}">#&nbsp;&nbsp</a>
{% enddefaultmacro %}
{% defaultmacro function(fn) -%}
	{# TODO: <div class="attr function">{{ headerlink(fn) }} #}
	{%- set name = fn.name -%}
	{%- set signature = fn.signature -%}
	{%- if fn.name == "__init__" -%}
		{%- set signature = fn.signature_without_self -%}
	{%- endif -%}
	<pre class="p-2 definition">
		{{- decorators(fn) -}}
		{#- no space -#}
		<span class="icon is-small mr-1"><span class="{{ symbol_icon(fn) }} has-text-grey-light"></span></span>
		{#- no space -#}
		<span class="has-text-weight-bold has-text-black">{{ fn.funcdef }}</span>
		{#- no space -#}
		<span class="has-text-weight-bold"> </span>
		{#- no space -#}
		<span class="has-text-weight-bold has-text-danger">{{ name }}</span>
		{#- no space -#}
		<span class="has-text-weight-bold has-text-black">{{ signature | escape | linkify }}:</span>
		{#- no space -#}
	</pre>
{% enddefaultmacro %}
{% defaultmacro variable(var) %}
	<pre class="p-2 definition">
		{#- no space -#}
		<span class="icon is-small mr-1"><span class="{{ symbol_icon(var) }}"></span></span>
		{#- no space -#}
		<span class="has-text-weight-bold has-text-danger">{{ var.name }}</span>
		{#- no space -#}
		<span class="has-text-weight-bold has-text-black">{{ annotation(var) }}</span>
		{#- no space -#}
		<span class="has-text-weight-bold has-text-black">{{ default_value(var) }}</span>
		{#- no space -#}
	</pre>
{% enddefaultmacro %}
{% defaultmacro submodule(mod) %}
	<pre class="p-2 definition">
		{#- no space -#}
		<span class="icon is-small mr-1"><span class="{{ symbol_icon({'type': 'module', 'qualname': mod.taken_from[0] }) }}"></span></span>
		{#- no space -#}
		<span class="has-text-weight-bold has-text-black">{{ mod.taken_from | link }}</span>
		{#- no space -#}
	</pre>
{% enddefaultmacro %}
{% defaultmacro class(cls) %}
	{# TODO: {{ headerlink(cls) }}#}
	<pre class="p-2 definition">
		{#- no space -#}
		{{- decorators(cls) -}}
		{#- no space -#}
		<span class="has-text-weight-bold has-text-black">class</span>
		{#- no space -#}
		<span class="has-text-weight-bold"> </span>
		{#- no space -#}
		<span class="has-text-weight-bold has-text-danger">{{ cls.qualname }}</span>
		{#- no space -#}
		<span class="has-text-weight-bold">{{- bases(cls) -}}</span>
		{#- no space -#}
	</pre>
{% enddefaultmacro %}
{% defaultmacro member(doc, last, parent=None) %}
	{% set dt_classes = "mt-5" %}
	{% set dd_classes = "mb-4" %}
	{% set body_classes = "pl-5 " + ("pt-3" if parent else "pt-5") %}

	{% if parent or doc.type == "module" %}
		{% set dt_classes = "" %}
	{% endif %}
	{% if doc.type == "module" %}
		{% set dd_classes = "" %}
		{% set body_classes = "pl-6 pb-5 pt-3" %}
	{% endif %}
	{% if doc.type == "class" %}
		{% set dt_classes = "mt-6" %}
	{% endif %}

	<dt class="{{ hide_private(doc) }} {{ dt_classes }}" id="{{ doc.qualname or doc.name }}">
		{% if doc.type == "class" %}
			{{ class(doc) }}
		{% elif doc.type == "function" %}
			{{ function(doc) }}
		{% elif doc.type == "module" %}
			{{ submodule(doc) }}
		{% else %}
			{{ variable(doc) }}
		{% endif %}
	</dt>
	{% set docstr = docstring(doc) %}
	{% set xs = [] %}
	{% if doc.type == "class" %}
		{% for x in doc.own_members if x.type != "class" and is_public(x) | trim %}
			{% set _ = xs.append(x) %}
		{% endfor %}
	{% endif %}
	{% if doc.type not in ["variable", "module"] %}
		{%- set viewsource = view_source(doc) -%}
	{% endif %}
	<dd class="{{ hide_private(doc) }} {{ dd_classes }}">
		{% if (doc.type != "class" and docstr) or xs|length > 0 %}
			<div class="{{ body_classes }}">
				{{ docstr }}
				{{ viewsource }}
				{% if doc.type == "class" %}
					{{ module_content(xs, parent=doc) }}
					{% set inherited_members = inherited(doc) | trim %}
					{% if inherited_members %}
						<div>
							<h5>Inherited Members</h5>
							{{ inherited_members }}
						</div>
					{% endif %}
				{% endif %}
			</div>
		{% else %}
			{{ viewsource }}
		{% endif %}
	</dd>
{% enddefaultmacro %}
{% defaultmacro docstring(var) %}
    {% if var.docstring %}
        <div class="content mb-0">{{ var.docstring | to_markdown | to_html | linkify(namespace=var.qualname) }}</div>
    {% endif %}
{% enddefaultmacro %}
{% defaultmacro is_public(doc) %}
	{# This macro has an unfortunate naming, and the name is hard-coded into
	some internal logic. Our intention is to have is_public return true
	for all symbols that should be documented. is_private then used to determine
	whether the symbol is part of the public API or the internal one. #}
    {#
    This macro is a bit unconventional in that its output is not rendered, but treated as a boolean:
    Returning no text is interpreted as false, returning any other text is iterpreted as true.
    Implementing this as a macro makes it very easy to override with a custom template..
    #}
    {% if not doc.name.startswith("__") %}
        {# members not starting with two underscores are considered public by default #}
        true
    {% elif doc.name == "__init__" %}
        {# the constructor is our special case which we also treat as public #}
        true
    {% elif doc.name == "__doc__" %}
        {# Sometimes we have __doc__ in __all__, which we want to exclude for pdoc's purposes. #}
        {# https://github.com/mitmproxy/pdoc/issues/235 #}
    {% elif doc.qualname is in(module.obj.__all__ or []) %}
        {# members are still public if mentioned in __all__ #}
        true
    {% endif %}
{% enddefaultmacro %}
{% defaultmacro is_private(doc) %}
	{# members starting with an underscore are private, except for __init__ #}
    {% if doc.name == "__init__" %}
    {% elif doc.name.startswith("_") %}
        true
    {% endif %}
{% enddefaultmacro %}
{% defaultmacro inherited(cls) %}
    {% for base, members in cls.inherited_members.items() %}
        {% set m = None %}{# workaround for https://github.com/pallets/jinja/issues/1427 #}
        {% set member_html %}
            {% for m in members if is_public(m) | trim %}
                <div id="{{ m.qualname }}" class="{{ m.type }}">
                    {{- m.taken_from | link(text=m.name.replace("__init__",base[1])) -}}
                </div>
            {% endfor %}
        {% endset %}
        {# we may not have any public members, in which case we don't want to print anything. #}
        {% if member_html %}
            <div>{{ base | link }}
                {{ member_html }}
            </div>
        {% endif %}
    {% endfor %}
{% enddefaultmacro %}
{% defaultmacro view_source(doc) %}
    {% if show_source and doc.source %}
        <details>
			{#- TODO: fucking webdev. make summary go right without the whole width becoming the button. FFS. float right doesnt work either as the fucking content gets fucking stripped for it then. fuck. workaround is to use float and absolute position but then other content can overlay into it. meeeeeeh -#}
			{#- TODO: dont -2.2 here. nononono -#}
			{#- TODO: some docstrings are indented. no good. -#}
			{#-
			<summary class="is-inline mr-6" style="position: absolute; right: 0; z-index: 1; list-style: none">
				<span class="button is-white-transparent is-uppercase has-text-grey is-size-7 has-text-weight-semibold" style="position: relative">Expand Source</span>
			</summary>
			-#}
			<summary class="is-flex is-justify-content-flex-end">
				<span class="button is-white-transparent is-uppercase has-text-grey is-size-7 has-text-weight-semibold" style="position: relative">Expand Source</span>
			</summary>
			{{ doc.source | highlight }}
        </details>
    {% endif %}
{% enddefaultmacro %}
{% macro breadcrumbs() %}
	<nav class="level breadcrumb" aria-label="breadcrumbs">
		<ul>
			{% set parts = module.modulename.split(".") %}
			<li class="{{ 'is-active' if not parts }}">
				<a href="{{ "../" * module.modulename.count(".") }}index.html">
					<span class="icon-text is-flex-wrap-nowrap">
						<span class="icon"><i class="fa-solid fa-list-ul"></i></span>
						<span class="is-family-code">Index</span>
					</span>
				</a>
			</li>
			{% for part in parts %}
				{%- set fullname = ".".join(parts[:loop.index]) -%}
				<li class="{{ 'is-active' if not loop.nextitem else '' }}">
					{%- if fullname in all_modules and fullname != module.modulename -%}
					{% set href = "./" + ("../" * loop.revindex0) + part + ".html" %}
					{%- endif -%}
					<a href="{{ href or "#" }}">
						<span class="icon-text is-flex-wrap-nowrap">
							<span class="icon"><i class="{{ symbol_icon({'type': 'module', 'qualname': fullname}) }}"></i></span>
							<span class="is-family-code">{{part}}</span>
						</span>
					</a>
				</li>
			{% endfor %}
		</ul>
		{% block edit_button %}
			{% if edit_url %}
				<div class="level-right">
					<button class="button is-small is-link is-outlined" href="{{ edit_url }}">
						<span class="icon"><i class="fa-brands fa-github"></i></span>
						<span>Edit</span>
					</button>
				</div>
			{% endif %}
		{% endblock %}
	</nav>
{% endmacro %}
{% defaultmacro symbol_icon(doc) -%}
	{%- if doc.type == "index" -%}
		fa-solid fa-list-ul
	{%- elif doc.type == "module" -%}
		{%- if not doc.submodules and doc.qualname or doc.fullname -%}
			{% set fn = doc.qualname or doc.fullname %}
			{% set submodules = [] %}
			{% for m in all_modules if m.startswith(fn + ".") %}
				{% set _ = submodules.append(m) %}
			{% endfor  %}
		{%- elif doc.submodules -%}
			{% set submodules = doc.submodules %}
		{%- endif -%}

		{%- if submodules|length > 0 -%}
			fa-solid fa-cubes
		{%- else -%}
			fa-solid fa-cube
		{%- endif -%}
	{%- elif doc.type == "variable" -%}
		{# TODO: disccern between class variables and member variables, needs pdoc code. while at it: add pre-splitted and sorted mods,classes,funcs,vars,.. #}
	    fa-solid fa-dice-d6
	{%- elif doc.type == "function" -%}
		{%- if doc.name == "__init__" -%}
			fa-regular fa-circle-dot
		{%- else -%}
			fa-solid fa-circle-dot
		{%- endif -%}
	{%- elif doc.type == "class" -%}
		fa-solid fa-diagram-project
	{%- else -%}
		fa-solid fa-circle-question
	{%- endif -%}
{% enddefaultmacro -%}
{% defaultmacro symbol_name(doc) -%}
	{%- if doc.type == "index" -%}
		{{- doc.name -}}
	{%- elif doc.type == "module" -%}
		{{- doc.qualname or doc.name -}}
	{%- elif doc.type == "variable" -%}
		{{- doc.name -}}
	{%- elif doc.type == "function" -%}
		{%- if doc.name == "__init__" -%}
			{{- doc.qualname.split(".")[-2] -}}
		{%- else -%}
			{{- doc.name -}}
		{%- endif -%}
	{%- elif doc.type == "class" -%}
		{{- doc.qualname or doc.name -}}
	{%- else -%}
		{{- doc.qualname or doc.name -}}
	{%- endif -%}
{% enddefaultmacro -%}
{% defaultmacro symbol_icontext(doc, name=None) -%}
	{% set classes = [] %}
	{% if is_private(doc) %}
		{% set _ = classes.append("has-text-grey-light") %}
	{% endif %}
	<span class="icon-text is-flex-wrap-nowrap {{' '.join(classes)}}">
        <span class="icon"><i class="{{symbol_icon(doc)}}"></i></span>
		<span class="is-family-code">{{name or symbol_name(doc)}}
		{%- if doc.type == "function" -%}
			<span class="has-text-grey-light">()</span>
		{%- endif -%}
		</span>
    </span>
{% enddefaultmacro %}
{% defaultmacro divider_button(label, href) -%}
	<a href="{{ href }}" class="button p-0 m-0 is-white is-size-7 has-text-grey" style="height: auto">{{ label }}</a>
{% enddefaultmacro %}
{% defaultmacro navlist(xs, label=None) -%}
    {% if xs %}
		{#- Check if all members are private. In that case we hide the whole list. -#}
		{% set public_members = [] %}
		{% for x in xs if not is_private(x) %}
			{% set _ = public_members.append(x) %}
		{% endfor %}
		{% set hide = 'pdoc-is-private' if public_members|length == 0 else '' %}

        {% if label %}
			<div class="{{ hide }} divider mb-3 is-left">{{ label }}</div>
        {% endif %}
        <ul class="{{ hide }} menu-list p-0 m-0">
            {% for m in xs %}
                {{ caller(m) }}
            {% endfor %}
        </ul>
    {% endif %}
{%- enddefaultmacro %}
{% defaultmacro for_member_navlist_filter(members, type, sort=None, label=None, parent=None, nestlevel=0) -%}
	{% set xs = [] %}
	{% for x in members if x.type == type and is_public(x) %}
		{% set _ = xs.append(x) %}
	{% endfor %}
    {% if sort %}
		{% set xs = xs | sort(attribute=sort) %}
	{% endif %}

	{#- Check if all members are private. In that case we hide the whole list. -#}
	{% set public_members = [] %}
	{% for x in xs if not is_private(x) %}
		{% set _ = public_members.append(x) %}
	{% endfor %}
	{% set hide = 'pdoc-is-private' if public_members|length == 0 else '' %}

    {% if xs %}
        {% if label and nestlevel == 0 %}
			<div class="{{ hide }} divider mb-3 is-left">{{ label }}</div>
        {% endif %}
        <ul class="{{ hide }} menu-list p-0 m-0 {{ "ml-5" if nestlevel > 0 else "" }}" style="border: 0">
            {% for x in xs %}
                {{ caller(x) }}
            {% endfor %}
        </ul>
    {% endif %}
{%- enddefaultmacro %}
{% defaultmacro hide_private(doc) -%}
	{{ 'pdoc-is-private' if is_private(doc) else '' }}
{%- enddefaultmacro %}
{% defaultmacro member_navlist(xs, parent=None, nestlevel=0, except=[]) -%}
	{% if 'variable' not in except %}
		{% call(m) for_member_navlist_filter(xs, type="variable", label=divider_button("Variables", "#variables"), parent=parent, nestlevel=nestlevel) %}
			<li class="{{ hide_private(m) }}"><a href="#{{ m.qualname }}" class="p-1">{{ symbol_icontext(m) }}</a></li>
		{% endcall %}
	{% endif %}

	{% if 'function' not in except %}
		{% call(m) for_member_navlist_filter(xs, type="function", sort="name", label=divider_button("Functions", "#functions"), parent=parent, nestlevel=nestlevel) %}
			<li class="{{ hide_private(m) }}"><a href="#{{ m.qualname }}" class="p-1">{{ symbol_icontext(m) }}</a></li>
		{% endcall %}
	{% endif %}

	{% if 'class' not in except %}
		{% call(m) for_member_navlist_filter(xs, type="class", sort="name", label=divider_button("Classes", "#classes"), parent=parent, nestlevel=nestlevel) %}
			<li class="mt-3 {{ hide_private(m) }}">
				<a href="#{{ m.qualname }}" class="p-1">{{ symbol_icontext(m) }}</a>
				{{ member_navlist(m.own_members, parent=m, nestlevel=nestlevel+1, except=['class']) }}
				{# TODO: with inherited members (make another toggle)
				{{ member_navlist(m.members.values(), parent=m, nestlevel=nestlevel+1, except=['class']) }}
				#}
			</li>
		{% endcall %}
	{% endif %}
{%- enddefaultmacro %}
{% defaultmacro for_member_content_filter(members, type, sort=None, parent=parent) -%}
	{% set xs = [] %}
	{% for x in members if x.type == type and is_public(x) %}
		{% set _ = xs.append(x) %}
	{% endfor %}
    {% if sort %}
		{% set xs = xs | sort(attribute=sort) %}
	{% endif %}

	{#- Check if all members are private. In that case we hide the whole list. -#}
	{% set public_members = [] %}
	{% for x in xs if not is_private(x) %}
		{% set _ = public_members.append(x) %}
	{% endfor %}
	{% set hide = 'pdoc-is-private' if public_members|length == 0 else '' %}

	{% set icon = symbol_icon({'type': type}) %}
	{% if type == "module" %}
		{% set section_name = "Submodules" %}
		{% set section_id = "submodules" %}
	{% elif type == "variable" %}
		{% set section_name = "Variables" %}
		{% set section_id = "variables" %}
	{% elif type == "function" %}
		{% set section_name = "Functions" %}
		{% set section_id = "functions" %}
	{% elif type == "class" %}
		{% set section_name = "Classes" %}
		{% set section_id = "classes" %}
	{% else %}
		{% set section_name = "Unkown Members" %}
		{% set section_id = "unknown_members" %}
	{% endif %}

    {% if xs %}
		{% if not parent %}
			<hr class="{{ hide }} mx-6">
			<section class="{{ hide }} section" id="{{ section_id }}">
				{# TODO: headerlink #}
				<div class="content">
					<h3>
					<span class="icon-text is-flex-wrap-nowrap">
						<span class="icon ml-1 mr-4"><i class="{{ icon }}"></i></span>
						<span class="is-family-monospace">{{ section_name }}</span>
					</span>
					</h3>
				</div>
				<dl>
					{% for x in xs %}
						{{ caller(x, loop.last) }}
					{% endfor %}
				</dl>
			</section>
		{% else %}
			<div class="divider is-left {{ hide }}">{{ section_id }}</div>
			<dl class="{{ hide }}">
				{% for x in xs %}
					{{ caller(x, loop.last) }}
				{% endfor %}
			</dl>
		{% endif %}
    {% endif %}
{%- enddefaultmacro %}
{% defaultmacro module_content(xs, except=[], parent=None) -%}
	{% if 'module' not in except %}
		{% call(m, last) for_member_content_filter(xs, type="module", sort="name", parent=parent) %}
			{{ member(m, last, parent=parent) }}
		{% endcall %}
	{% endif %}

	{% if 'variable' not in except %}
		{% call(m, last) for_member_content_filter(xs, type="variable", parent=parent) %}
			{{ member(m, last, parent=parent) }}
		{% endcall %}
	{% endif %}

	{% if 'function' not in except %}
		{% call(m, last) for_member_content_filter(xs, type="function", sort="name", parent=parent) %}
			{{ member(m, last, parent=parent) }}
		{% endcall %}
	{% endif %}

	{% if 'class' not in except %}
		{% call(m, last) for_member_content_filter(xs, type="class", sort="name", parent=parent) %}
			{{ member(m, last, parent=parent) }}
		{% endcall %}
	{% endif %}
{%- enddefaultmacro %}
{% macro define_nav() -%}
	{% block nav %}
		{# TODO: the overflow should be hidden if the navbar is fullwidth . #}
		<nav class="menu" style="position: sticky; vertical-align: top; max-height: 100vh; overflow-y: auto; top: 0; bottom: 0; padding: 30px;">
			<div>
				{% block nav_title %}
					{% if logo %}
						{% if logo_link %}<a href="{{ logo_link }}">{% endif %}
						<img src="{{ logo }}" class="logo" alt="project logo"/>
						{% if logo_link %}</a>{% endif %}
					{% endif %}
				{% endblock %}

				{% block nav_search_box %}
					{% if search and all_modules|length > 1 %}
						<p class="control has-icons-right mb-5">
							<input class="input" type="search" placeholder="Search..." required>
							<span class="icon is-small is-right">
								<i class="fa-solid fa-magnifying-glass"></i>
							</span>
						</p>
					{% endif %}
				{% endblock %}

				{% block nav_module_contents %}
					{# TODO: Test this #}
					{% set index = module.docstring | to_markdown | to_html | attr("toc_html") %}
					{% if index %}
						<div class="divider mb-3 is-left">Contents</div>
						{{ index | safe }}
					{% endif %}
				{% endblock %}

				{% block nav_parent_module %}
					{% set parentmodule = ".".join(module.modulename.split(".")[:-1]) %}
					{% set pm = {'type': 'module', 'qualname': parentmodule, 'name': parentmodule.split('.')[-1]} %}
					{% if parentmodule and parentmodule in all_modules %}
						{% call(x) navlist([pm], label="Parent Module") %}
							<li>
								<a href="../{{ x.qualname.split(".")[-1] }}.html" class="p-1">
									{{ symbol_icontext(x) }}
								</a>
							</li>
						{% endcall %}
					{% elif all_modules|length > 1 %}
						{% call(x) navlist([pm], label="Navigation") %}
							<li>
								<a href="{{ "../" * module.modulename.count(".") }}index.html" class="p-1">
									{{ symbol_icontext({'name': 'Index', 'type': 'index'}) }}
								</a>
							</li>
						{% endcall %}
					{% endif %}
				{% endblock %}

				{% block nav_submodules %}
					{% call(m) navlist(module.submodules, label=divider_button("Submodules", "#submodules")) %}
						{# TODO: This is really awful. But we require a better link() function to solve it. #}
						{# TODO: Maybe only use normal name not qualname? #}
						{% set lnk = m.taken_from | link %}
						{% set a_tag, rest = lnk.split('">') %}
						{% set _, href = a_tag.split('href="') %}
						{% set name, _ = rest.split('</a>') %}
						<li class="{{ hide_private(m) }}"><a href="{{ href }}" class="p-1">{{ symbol_icontext(m, name=name) }}</a></li>
					{% endcall %}
				{% endblock %}

				{% block nav_member_list %}
					{{ member_navlist(module.flattened_own_members) }}
				{% endblock %}
			</div>
		</nav>
	{% endblock %}
{%- endmacro %}
{% macro define_main_content() -%}
	{% block main_content %}
		{% block breadcrumbs %}
			<div class="p-6">
				{{ breadcrumbs() }}
			</div>
		{% endblock %}
		{% block module_info %}
			<section class="section">
				<div class="content">
					<h3>
					<span class="icon-text is-flex-wrap-nowrap">
						<span class="icon ml-1 mr-4"><i class="{{ symbol_icon(module) }}"></i></span>
						{#-
						{% set parts = module.fullname.split(".") %}
						<span class="is-family-monospace">Module <span>{{ '.'.join(parts[:-1]) + ('.' if parts|length > 1 else '') }}</span><span class="has-text-danger">{{ parts[-1] }}</span></span>
						-#}
						<span class="is-family-monospace">Module <span class="has-text-danger">{{ module.name }}</span></span>
					</span>
					</h3>
				</div>
				{{ docstring(module) }}
				{{ view_source(module) }}
			</section>
		{% endblock %}
		{% block module_contents %}
			{{ module_content(module.submodules) }}
			{{ module_content(module.flattened_own_members) }}
		{% endblock %}
	{% endblock %}
{%- endmacro %}
{% block head %}
    {% if math %}{% include "math.html.jinja2" %}{% endif %}
{% endblock %}
{% block body %}
    <div class="columns is-multiline is-fullheight">
		{# TODO: if long items are in the sidebar, this shit wraps around too early. I want a reasonable automatic size limit for the sidebar. #}
		<div class="column px-3 pb-0" style="max-width: 540px;">
			{{ define_nav() }}
		</div>
		{# TODO: after wraparound use all the space ffs #}
		<div class="column is-8">
			<main class="container">
				{{ define_main_content() }}
			</main>

			{% if mtime %}
				{% include "livereload.html.jinja2" %}
			{% endif %}
			{% block search_js %}
				{% if search and all_modules|length > 1 %}
					{% include "search.html.jinja2" %}
				{% endif %}
			{% endblock %}

			{% block footer %}
				<footer>
					{{- footer_text or "" -}}
					{{ attribution() }}
				</footer>
			{% endblock %}
		</div>
	</div>
{% endblock %}
