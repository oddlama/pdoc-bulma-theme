{# CAN DO #}
{# TODO: search no worky #}
{# TODO: dark theme switch in top navbar that scrolls away? #}
{# TODO: built with footer looks ugly #}
{# TODO: links that point to private members should add a request param that overrides visibility (FOR THAT ITEM ONLY) #}
{# PER PROJECT #}
{# TODO: minify result html #}
{# TODO: ensure that the message component is used when generating markdown content with admonitions #}
{# TODO: variable definitions should not be evaluated #}
{# NEEDS PDOC CODE #}
{# TODO: expand source code should have strip unnecesary levels of indentation #}
{# TODO: show on git button that highlights the code snippet on relevant git commit #}
{# TODO: | highlight_linkify #}
{# TODO: shorten links in generated code e.g. mypackage.sub.Someclass should become Someclass for readability. At least when the referenced definition is from the same module. #}
{% extends "frame.html.jinja2" %}
{% block title %}{{ module.modulename }} API documentation{% endblock %}
{% block style %}
	{{ super() | safe }}
    {% filter minify_css %}
		<style>{% include 'css/syntax-highlighting.css' %}</style>
		<style>
		.symbol-is-private { display: none; }
		.anchor-title, .anchor-title-always-left {
			position: relative;
		}
		.anchor-link, .anchor-link-always-left {
			position: absolute;
			right: calc(100% + 1rem);
			top: 0;
		}
		.classbox {
			background-color: white;
			border-radius: 6px;
			box-shadow: 0 0 0 1px rgba(10, 10, 10, 0.1), 0 0.25em rgba(10, 10, 10, 0.1);
			color: #4a4a4a;
			display: block;
			overflow: hidden; /* Necessary so that margin inside the box doesn't "leak" out of the classbox */
		}
		@media screen and (max-width:1024px) {
			.anchor-link {
				left: 0;
				right: auto;
			}
			.anchor-title {
				padding-left: 1em;
			}
		}
		.sidebar-layout {
			display: flex;
			width: 100%;
		}
		.sidebar-left {
			padding: 1.5rem;
			overflow-y: auto;
			scrollbar-width: thin;
			scrollbar-color: inherit transparent;

			display: flex;
			min-width: 480px;
			width: 540px;
			height: 100vh;
			position: sticky;
			top: 0;
		}
		.is-fullwidth {
			width: 100%;
		}
		.main-content {
			min-width: 480px;
			width: 100%;
		}
		@media screen and (max-width:1200px) {
			.sidebar-layout {
				display: block;
				width: 100%;
			}
			.sidebar-overflow-button {
				visibility: visible;
			}
			.sidebar-left {
				height: auto;
				width: 100%;
				position: relative;
				top: auto;
				/* instead - for collapsible fixed sidebar:
				position: fixed;
				top: 0;
				left: 0;
				height: 100vh;
				background: white;
				z-index: 999;
				*/
			}
		}
		.logo {
			max-width: 144px;
			max-height: 144px;
		}
		.rounded-border {
			border-radius: 6px;
			box-shadow: 0 0 0 1px rgba(10, 10, 10, 0.1);
		}
		pre {
			scrollbar-width: thin;
			scrollbar-color: inherit transparent;
		}
		.content pre {
			border-radius: 6px;
			box-shadow: 0 0 0 1px rgba(10, 10, 10, 0.1);
			font-size: 0.85rem;
			padding: .5rem .75rem !important;
			margin-bottom: 1rem;
		}
		.codehilite:not(.content *) > pre {
			font-size: 0.85rem;
			padding: 0;
			margin: 0;
			scrollbar-width: thin;
			scrollbar-color: inherit transparent;
		}
		code:not(pre *) {
			padding: 0.125em 0.25em 0.125em;
			border-radius: 6px;
			box-shadow: 0 0 0 1px rgba(10, 10, 10, 0.1);
			color: inherit;
		}
		.nav-content li {
			margin: 0.25rem; }
		.nav-content li a {
			color: inherit; }
		.nav-content li a:hover {
			color: #485fc7; }
		.nav-content > ul > li {
			font-weight: 700; }
		.nav-content li ul {
			font-weight: 400;
			padding-left: 1rem;
			margin-bottom: 0.5rem; }
		.button.is-white-transparent {
			background-color: transparent;
			border-color: transparent;
			color: #0a0a0a; }
		.button.is-white-transparent:hover, .button.is-white-transparent.is-hovered {
			background-color: #f9f9f9;
			border-color: transparent;
			color: #0a0a0a; }
		.button.is-white-transparent:focus, .button.is-white-transparent.is-focused {
			border-color: transparent;
			color: #0a0a0a; }
		.button.is-white-transparent:focus:not(:active), .button.is-white-transparent.is-focused:not(:active) {
			box-shadow: 0 0 0 0.125em rgba(255, 255, 255, 0.25); }
		.button.is-white-transparent:active, .button.is-white-transparent.is-active {
			background-color: #f2f2f2;
			border-color: transparent;
			color: #0a0a0a; }
		</style>
    {% endfilter %}
{% endblock %}
{% defaultmacro bases(cls) %}
    {%- if cls.bases -%}
        <wbr>(
        {%- for base in cls.bases -%}
            <span class="base">{{ base[:2] | link(text=base[2]) }}</span>
            {%- if loop.nextitem %}, {% endif %}
        {%- endfor -%}
        )
    {%- endif -%}
{% enddefaultmacro %}
{% defaultmacro decorators(doc) %}
	{%- for d in doc.decorators if not d.startswith("@_") %}
		{{- d | escape | linkify }}
	{% endfor -%}
{% enddefaultmacro %}
{% defaultmacro function(doc) -%}
	{%- set name = doc.name -%}
	{%- set signature = doc.signature -%}
	{%- if doc.name == "__init__" -%}
		{%- set signature = doc.signature_without_self -%}
	{%- endif -%}

	<pre class="p-2 codehilite rounded-border">
		{#- no space -#}
		<span class="has-text-weight-bold has-text-grey">{{- decorators(doc) -}}</span>
		{#- no space -#}
		<span class="icon is-small mr-1"><a href="#{{ doc.qualname }}"><span class="{{ symbol_icon(doc) }}"></span></a></span>
		{#- no space -#}
		<span class="has-text-weight-bold">{{ doc.funcdef }}</span>
		{#- no space -#}
		<span class="has-text-weight-bold"> </span>
		{#- no space -#}
		<span class="has-text-weight-bold has-text-danger">{{ name }}</span>
		{#- no space -#}
		<span class="has-text-weight-bold">{{ signature | escape | linkify }}:</span>
		{#- no space -#}
	</pre>
	{{ view_source_pre_above(doc) }}
{% enddefaultmacro %}
{% defaultmacro variable(doc) %}
	<pre class="p-2 codehilite rounded-border">
		{#- no space -#}
		<span class="icon is-small mr-1"><a href="#{{ doc.qualname }}"><span class="{{ symbol_icon(doc) }}"></span></a></span>
		{#- no space -#}
		<span class="has-text-weight-bold has-text-danger">{{ doc.name }}</span>
		{#- no space -#}
		{%- if doc.annotation_str -%}
			<span class="has-text-weight-bold">{{ doc.annotation_str }}</span>
		{%- endif -%}
		{#- no space -#}
		{%- if doc.default_value_str -%}
			{%- if '> at 0x' in doc.default_value_str -%}
				<span class="has-text-weight-bold"> = &lt;redacted&gt;</span>
			{%- else -%}
				<span class="has-text-weight-bold">{{- doc.default_value_str | escape | linkify -}}</span>
			{%- endif -%}
		{%- endif -%}
		{#- no space -#}
	</pre>
{% enddefaultmacro %}
{% defaultmacro submodule(doc) %}
	<pre class="p-2 codehilite rounded-border">
		{#- no space -#}
		<span class="icon is-small mr-1"><span class="{{ symbol_icon({'type': 'module', 'qualname': doc.taken_from[0] }) }}"></span></span>
		{#- no space -#}
		<span class="has-text-weight-bold">{{ doc.taken_from | link }}</span>
		{#- no space -#}
	</pre>
{% enddefaultmacro %}
{% defaultmacro class(doc) %}
	<div class="p-2 codehilite">
		<pre>
			{#- no space -#}
			<span class="has-text-weight-bold has-text-grey">{{- decorators(doc) -}}</span>
			{#- no space -#}
			<span class="icon is-small mr-1"><a href="#{{ doc.qualname }}"><span class="{{ symbol_icon(doc) }}"></span></a></span>
			{#- no space -#}
			<span class="has-text-weight-bold">class </span>
			{#- no space -#}
			<span class="has-text-weight-bold has-text-danger">{{ doc.qualname }}</span>
			{#- no space -#}
			<span class="has-text-weight-bold">{{- bases(doc) -}}:</span>
			{#- no space -#}
		</pre>
	</div>
	{{ view_source_pre_above(doc) }}
{% enddefaultmacro %}
{% defaultmacro inherited_members(doc, last, parent=None) %}
	{# Inherited members, list of tuples: [(base, [member, ...]), ...]. #}
	{% set inherited = [] %}
	{% for base, members in doc.inherited_members.items() %}
		{% set xs = [] %}
		{% for x in members if is_public(x) %}
			{% set _ = xs.append(x) %}
		{% endfor %}

		{% if xs|length > 0 %}
			{% set _ = inherited.append((base, xs)) %}
		{% endif %}
	{% endfor %}

	{% if inherited|length > 0 %}
		<div class="divider is-left">Inherited Members</div>
		<table class="table my-5">
			<tbody>
				{% for base, members in inherited %}
					{#- Check if all inherited members of this base are private. In that case we add the hide tag to the whole table row. -#}
					{% set base_public_members = [] %}
					{% for x in members if not is_private(x) %}
						{% set _ = base_public_members.append(x) %}
					{% endfor %}
					{% set hide_row = 'symbol-is-private' if not base_public_members else '' %}

					<tr class="{{ hide_row }}">
						<td class="has-text-weight-bold">
							<div class="m-0 columns is-multiline is-mobile">
								<div class="p-0 column is-narrow">
									{# TODO: This is really awful. But we require a better link() function to solve it. #}
									{% set lnk = base | link %}
									{% set symbol_content = symbol_icontext({'type': 'class', 'name': base[1] + ":"}) %}
									{% if '">' in lnk %}
										{% set a_tag, _ = lnk.split('">') %}
										{% set _, href = a_tag.split('href="') %}
										<a class="button is-white has-text-grey-dark" href="{{ href }}">
											{{ symbol_content }}
										</a>
									{% else %}
										<button class="button is-white has-text-grey-dark" disabled>
											{{ symbol_content }}
										</button>
									{% endif %}
								</div>
							</div>
						</td>
						<td>
							{% for t in ["class", "module", "variable", "function"] %}
								{% set xs = [] %}
								{% for x in members if x.type == t and is_public(x) %}
									{% set _ = xs.append(x) %}
								{% endfor %}

								{% if xs %}
									{#- Check if all members are private. In that case we add the hide tag to the whole list. -#}
									{% set public_members = [] %}
									{% for x in xs if not is_private(x) %}
										{% set _ = public_members.append(x) %}
									{% endfor %}
									{% set hide = 'symbol-is-private' if not public_members else '' %}

									<div class="{{ hide }} m-0 columns is-multiline is-mobile">
										{% for x in xs | sort(attribute='name') %}
											<div class="{{ hide_private(x) }} p-0 column is-narrow has-text-weight-bold">
												{# TODO: This is really awful. But we require a better link() function to solve it. #}
												{% set lnk = x.taken_from | link %}
												{% if '">' in lnk %}
													{% set a_tag, _ = lnk.split('">') %}
													{% set _, href = a_tag.split('href="') %}
													<a class="button px-4 py-2 is-white has-text-grey-dark" href="{{ href }}">
														{{ symbol_icontext(x) }}
													</a>
												{% else %}
													<button class="button px-4 py-2 is-white has-text-grey-dark" disabled>
														{{ symbol_icontext(x) }}
													</button>
												{% endif %}
											</div>
										{% endfor %}
									</div>
								{% endif %}
							{% endfor %}
						</td>
					</tr>
				{% endfor %}
			</tbody>
		</table>
	{% endif %}
{% enddefaultmacro %}
{% defaultmacro member(doc, last, parent=None) %}
	{% set div_classes = "" %}
	{% set member_classes = "mt-5" %}

	{% if doc.type == "class" %}
		{% set div_classes = "classbox my-6" %}
		{% set member_classes = "px-2 py-1 has-background-white-ter" %}
	{% endif %}

	<div id="{{ doc.qualname or doc.name }}" class="{{ div_classes }}">
		<div class="{{ hide_private(doc) }} {{ member_classes }}">
			{% if doc.type == "class" %}
				{{ class(doc) }}
			{% elif doc.type == "function" %}
				{{ function(doc) }}
			{% elif doc.type == "module" %}
				{{ submodule(doc) }}
			{% else %}
				{{ variable(doc) }}
			{% endif %}
		</div>
		{% set docstr = docstring(doc) %}
		{% set xs = [] %}
		{% if doc.type == "class" %}
			{#- Add own members -#}
			{% for x in doc.own_members if x.type != "class" and is_public(x) %}
				{% set _ = xs.append(x) %}
			{% endfor %}
		{% endif %}
		{% if (doc.type != "class" and docstr) or xs %}
			<div class="{{ hide_private(doc) }} mx-5 mb-5 mt-4">
				{{ docstr }}
				{% if doc.type == "class" %}
					{{ module_content(xs, parent=doc) }}
					{{ inherited_members(doc) }}
				{% endif %}
			</div>
		{% endif %}
	</div>
{% enddefaultmacro %}
{% defaultmacro docstring(var) %}
    {% if var.docstring %}
        <div class="content mb-0">{{ var.docstring | to_markdown | to_html | linkify(namespace=var.qualname) }}</div>
    {% endif %}
{% enddefaultmacro %}
{% defaultmacro is_public(doc) %}
	{# This macro has an unfortunate naming, and the name is hard-coded into
	some internal logic. Our intention is to have is_public return true
	for all symbols that should be documented. is_private then used to determine
	whether the symbol is part of the public API or the internal one. #}
    {#
    This macro is a bit unconventional in that its output is not rendered, but treated as a boolean:
    Returning no text is interpreted as false, returning any other text is iterpreted as true.
    Implementing this as a macro makes it very easy to override with a custom template..
    #}
    {% if not doc.name.startswith("__") %}
        {# members not starting with two underscores are considered public by default #}
        true
    {% elif doc.name == "__init__" %}
        {# the constructor is our special case which we also treat as public #}
        true
    {% elif doc.name == "__doc__" %}
        {# Sometimes we have __doc__ in __all__, which we want to exclude for pdoc's purposes. #}
        {# https://github.com/mitmproxy/pdoc/issues/235 #}
    {% elif doc.qualname is in(module.obj.__all__ or []) %}
        {# members are still public if mentioned in __all__ #}
        true
    {% endif %}
{% enddefaultmacro %}
{% defaultmacro is_private(doc) %}
	{# members starting with an underscore are private, except for __init__ #}
    {% if doc.name == "__init__" %}
    {% elif doc.name.startswith("_") %}
        true
    {% endif %}
{% enddefaultmacro %}
{% defaultmacro view_source(doc) %}
    {% if show_source and doc.source %}
        <details class="mt-2 is-relative">
			<summary style="position: absolute; right: 0">
				<span class="button is-white-transparent is-uppercase has-text-grey is-size-7 has-text-weight-semibold is-relative">Expand Source</span>
			</summary>
			<div class="p-2 has-background-white-ter {{ "rounded-border" if doc.type != "class" else "" }}">
				{{ doc.source | highlight }}
			</div>
        </details>
    {% endif %}
{% enddefaultmacro %}
{% defaultmacro view_source_pre_above(doc) %}
	{% if show_source and doc.source %}
		<details class="is-relative">
			{# TODO: properly fix element, and make pre content above exclude the summary button #}
			<summary style="position: absolute; right: 0; top: -2rem">
				<span class="button is-light is-uppercase has-text-grey is-size-7 has-text-weight-semibold is-relative">Expand Source</span>
			</summary>
			<div class="p-2 has-background-white-ter {{ "rounded-border" if doc.type != "class" else "" }}">
				{{ doc.source | highlight }}
			</div>
		</details>
	{% endif %}
{% enddefaultmacro %}
{% macro breadcrumbs() %}
	<nav class="level breadcrumb" aria-label="breadcrumbs">
		<ul>
			{% set parts = module.modulename.split(".") %}
			<li class="{{ 'is-active' if not parts }}">
				<a href="{{ "../" * module.modulename.count(".") }}index.html">
					<span class="icon-text is-flex-wrap-nowrap">
						<span class="icon"><i class="fa-solid fa-list-ul"></i></span>
						<span class="is-family-code">Index</span>
					</span>
				</a>
			</li>
			{% for part in parts %}
				{%- set fullname = ".".join(parts[:loop.index]) -%}
				<li class="{{ 'is-active' if not loop.nextitem else '' }}">
					{%- if fullname in all_modules and fullname != module.modulename -%}
					{% set href = "./" + ("../" * loop.revindex0) + part + ".html" %}
					{%- endif -%}
					<a href="{{ href or "#" }}">
						<span class="icon-text is-flex-wrap-nowrap">
							<span class="icon"><i class="{{ symbol_icon({'type': 'module', 'qualname': fullname}) }}"></i></span>
							<span class="is-family-code">{{part}}</span>
						</span>
					</a>
				</li>
			{% endfor %}
		</ul>
		{% block edit_button %}
            {% if edit_url %}
				<div class="level-right">
					<button class="level-item button is-small is-link is-outlined" href="{{ edit_url }}">
						<span class="icon"><i class="fa-brands fa-github"></i></span>
						<span>Edit</span>
					</button>
				</div>
			{% endif %}
		{% endblock %}
	</nav>
{% endmacro %}
{% defaultmacro symbol_icon(doc) -%}
	{%- if doc.type == "index" -%}
		fa-solid fa-list-ul
	{%- elif doc.type == "module" -%}
		{%- if not doc.submodules and doc.qualname or doc.fullname -%}
			{% set fn = doc.qualname or doc.fullname %}
			{% set submodules = [] %}
			{% for m in all_modules if m.startswith(fn + ".") %}
				{% set _ = submodules.append(m) %}
			{% endfor  %}
		{%- elif doc.submodules -%}
			{% set submodules = doc.submodules %}
		{%- endif -%}

		{%- if submodules -%}
			fa-solid fa-cubes
		{%- else -%}
			fa-solid fa-cube
		{%- endif -%}
	{%- elif doc.type == "variable" -%}
		{# TODO: disccern between class variables and member variables, needs pdoc code. while at it: add pre-splitted and sorted mods,classes,funcs,vars,.. #}
	    fa-solid fa-dice-d6
	{%- elif doc.type == "function" -%}
		{%- if doc.name == "__init__" -%}
			fa-regular fa-circle-dot
		{%- else -%}
			fa-solid fa-circle-dot
		{%- endif -%}
	{%- elif doc.type == "class" -%}
		fa-solid fa-diagram-project
	{%- else -%}
		fa-solid fa-circle-question
	{%- endif -%}
{% enddefaultmacro -%}
{% defaultmacro symbol_name(doc) -%}
	{%- if doc.type == "index" -%}
		{{- doc.name -}}
	{%- elif doc.type == "module" -%}
		{{- doc.qualname or doc.name -}}
	{%- elif doc.type == "variable" -%}
		{{- doc.name -}}
	{%- elif doc.type == "function" -%}
		{%- if doc.name == "__init__" -%}
			{{- doc.qualname.split(".")[-2] -}}
		{%- else -%}
			{{- doc.name -}}
		{%- endif -%}
	{%- elif doc.type == "class" -%}
		{{- doc.qualname or doc.name -}}
	{%- else -%}
		{{- doc.qualname or doc.name -}}
	{%- endif -%}
{% enddefaultmacro -%}
{% defaultmacro symbol_icontext(doc, name=None, classes="", icon_classes="", text_classes="") -%}
	{% if is_private(doc) %}
		{% set classes = classes + " " + "has-text-grey-light" %}
	{% endif %}
	<span class="icon-text is-flex-wrap-nowrap {{ classes }}">
        <span class="icon {{icon_classes}}"><i class="{{symbol_icon(doc)}}"></i></span>
		<span class="is-family-code {{text_classes}}">{{name or symbol_name(doc)}}
		{%- if doc.type == "function" -%}
			<span class="has-text-grey-light">()</span>
		{%- endif -%}
		</span>
    </span>
{% enddefaultmacro %}
{% defaultmacro divider_button(label, href) -%}
	<a href="{{ href }}" class="button p-0 m-0 is-white is-size-7 has-text-grey" style="height: auto">{{ label }}</a>
{% enddefaultmacro %}
{% defaultmacro navlist(xs, label=None) -%}
    {% if xs %}
		{#- Check if all members are private. In that case we add the hide tag to the whole list. -#}
		{% set public_members = [] %}
		{% for x in xs if not is_private(x) %}
			{% set _ = public_members.append(x) %}
		{% endfor %}
		{% set hide = 'symbol-is-private' if not public_members else '' %}

        {% if label %}
			<div class="{{ hide }} divider mb-3 is-left">{{ label }}</div>
        {% endif %}
        <ul class="{{ hide }} menu-list p-0 m-0">
            {% for m in xs %}
                {{ caller(m) }}
            {% endfor %}
        </ul>
    {% endif %}
{%- enddefaultmacro %}
{% defaultmacro for_member_navlist_filter(members, type, sort=None, label=None, parent=None, nestlevel=0) -%}
	{% set xs = [] %}
	{% for x in members if x.type == type and is_public(x) %}
		{% set _ = xs.append(x) %}
	{% endfor %}
    {% if sort %}
		{% set xs = xs | sort(attribute=sort) %}
	{% endif %}

	{#- Check if all members are private. In that case we add the hide tag to the whole list. -#}
	{% set public_members = [] %}
	{% for x in xs if not is_private(x) %}
		{% set _ = public_members.append(x) %}
	{% endfor %}
	{% set hide = 'symbol-is-private' if not public_members else '' %}

    {% if xs %}
        {% if label and nestlevel == 0 %}
			<div class="{{ hide }} divider mb-3 is-left">{{ label }}</div>
        {% endif %}
        <ul class="{{ hide }} menu-list p-0 m-0 {{ "ml-5" if nestlevel > 0 else "" }}" style="border: 0">
            {% for x in xs %}
                {{ caller(x) }}
            {% endfor %}
        </ul>
    {% endif %}
{%- enddefaultmacro %}
{% defaultmacro hide_private(doc) -%}
	{{ 'symbol-is-private' if is_private(doc) else '' }}
{%- enddefaultmacro %}
{% defaultmacro navlist_entry(doc, name=None, href=None) -%}
	<li class="{{ hide_private(doc) }}">
		<a href="{{ href or ('#' + doc.qualname) }}" class="p-1">
			<span class="is-flex-wrap-nowrap level">
				{{ symbol_icontext(doc, name=name) }}
				{# TODO: (inherit) doc.inherited is wrong, but somehow this information is already available.
				{%- if doc.inherited -%}
					<div class="level-right">
						<span class="tag level-item is-grey ml-auto">Inherited</span>
					</div>
				{%- endif -%}
				#}
			</span>
		</a>
	</li>
{%- enddefaultmacro %}
{% defaultmacro member_navlist(xs, parent=None, nestlevel=0, except=[]) -%}
	{% if 'module' not in except %}
		{% call(m) for_member_navlist_filter(xs, type="module", label=divider_button("Submodules", "#section-submodules"), parent=parent, nestlevel=nestlevel) %}
			{# TODO: This is really awful. But we require a better link() function to solve it. #}
			{# TODO: Maybe only use normal name not qualname? #}
			{% set lnk = m.taken_from | link %}
			{% set a_tag, rest = lnk.split('">') %}
			{% set _, href = a_tag.split('href="') %}
			{% set name, _ = rest.split('</a>') %}
			{{ navlist_entry(m, name=name, href=href) }}
		{% endcall %}
	{% endif %}

	{% if 'variable' not in except %}
		{% call(m) for_member_navlist_filter(xs, type="variable", label=divider_button("Variables", "#section-variables"), parent=parent, nestlevel=nestlevel) %}
			{{ navlist_entry(m) }}
		{% endcall %}
	{% endif %}

	{% if 'function' not in except %}
		{% call(m) for_member_navlist_filter(xs, type="function", sort="name", label=divider_button("Functions", "#section-functions"), parent=parent, nestlevel=nestlevel) %}
			{{ navlist_entry(m) }}
		{% endcall %}
	{% endif %}

	{% if 'class' not in except %}
		{% call(m) for_member_navlist_filter(xs, type="class", sort="name", label=divider_button("Classes", "#section-classes"), parent=parent, nestlevel=nestlevel) %}
			<li class="mt-3 {{ hide_private(m) }}">
				<a href="#{{ m.qualname }}" class="p-1">{{ symbol_icontext(m) }}</a>
				{% set xs = [] %}
				{#- Add own members -#}
				{% for x in m.own_members if x.type != "class" and is_public(x) %}
					{% set _ = xs.append(x) %}
				{% endfor %}
				{{ member_navlist(xs, parent=m, nestlevel=nestlevel+1, except=['class']) }}
			</li>
		{% endcall %}
	{% endif %}
{%- enddefaultmacro %}
{% defaultmacro for_member_content_filter(members, type, sort=None, parent=parent) -%}
	{% set xs = [] %}
	{% for x in members if x.type == type and is_public(x) %}
		{% set _ = xs.append(x) %}
	{% endfor %}
    {% if sort %}
		{% set xs = xs | sort(attribute=sort) %}
	{% endif %}

	{#- Check if all members are private. In that case we add the hide tag to the whole list. -#}
	{% set public_members = [] %}
	{% for x in xs if not is_private(x) %}
		{% set _ = public_members.append(x) %}
	{% endfor %}
	{% set hide = 'symbol-is-private' if not public_members else '' %}

	{% set icon = symbol_icon({'type': type}) %}
	{% if type == "module" %}
		{% set section_name = "Submodules" %}
		{% set section_id = "submodules" %}
	{% elif type == "variable" %}
		{% set section_name = "Variables" %}
		{% set section_id = "variables" %}
	{% elif type == "function" %}
		{% set section_name = "Functions" %}
		{% set section_id = "functions" %}
	{% elif type == "class" %}
		{% set section_name = "Classes" %}
		{% set section_id = "classes" %}
	{% else %}
		{% set section_name = "Unkown Members" %}
		{% set section_id = "unknown_members" %}
	{% endif %}

    {% if xs %}
		{% if not parent %}
			<section class="{{ hide }} section py-0 my-6" id="section-{{ section_id }}">
				<hr class="mb-6">
				<h2 class="title is-4 anchor-title">
					<span class="is-flex-wrap-nowrap">
						<span>{{ section_name }}</span>
					</span>
					<a class="anchor-link" href="#section-{{ section_id }}">#</a>
				</h2>
				{% for x in xs %}
					{{ caller(x, loop.last) }}
				{% endfor %}
			</section>
		{% else %}
			<div class="divider is-left {{ hide }}">{{ section_id }}</div>
			<div class="{{ hide }}">
				{% for x in xs %}
					{{ caller(x, loop.last) }}
				{% endfor %}
			</div>
		{% endif %}
    {% endif %}
{%- enddefaultmacro %}
{% defaultmacro module_content(xs, except=[], parent=None) -%}
	{% if 'module' not in except %}
		{% call(m, last) for_member_content_filter(xs, type="module", sort="name", parent=parent) %}
			{{ member(m, last, parent=parent) }}
		{% endcall %}
	{% endif %}

	{% if 'variable' not in except %}
		{% call(m, last) for_member_content_filter(xs, type="variable", parent=parent) %}
			{{ member(m, last, parent=parent) }}
		{% endcall %}
	{% endif %}

	{% if 'function' not in except %}
		{% call(m, last) for_member_content_filter(xs, type="function", sort="name", parent=parent) %}
			{{ member(m, last, parent=parent) }}
		{% endcall %}
	{% endif %}

	{% if 'class' not in except %}
		{% call(m, last) for_member_content_filter(xs, type="class", sort="name", parent=parent) %}
			{{ member(m, last, parent=parent) }}
		{% endcall %}
	{% endif %}
{%- enddefaultmacro %}
{% macro define_nav() -%}
	{% block nav %}
		<nav class="is-fullwidth">
			{% block nav_title %}
				{% if logo %}
					<div class="is-flex is-justify-content-center">
						{% if logo_link %}<a href="{{ logo_link }}">{% endif %}
							<figure class="image logo m-5">
								<img src="{{ logo }}" alt="project logo">
							</figure>
						{% if logo_link %}</a>{% endif %}
					</div>
				{% endif %}
			{% endblock %}

			{% block nav_search_box %}
				{% if search %}
					<p class="control has-icons-right my-5">
						<input class="input" type="search" placeholder="Search..." required>
						<span class="icon is-small is-right">
							<i class="fa-solid fa-magnifying-glass"></i>
						</span>
					</p>
				{% endif %}
			{% endblock %}

			{% block nav_module_contents %}
				<div class="field">
					<input id="toggle-private-members" class="switch is-rounded is-info" type="checkbox">
					<label for="toggle-private-members">Show private members</label>
				</div>
				<script>
					var toggle_private = function(show) {
						document.querySelectorAll('.symbol-is-private').forEach(function(e) {
							e.style.display = show ? 'inherit' : 'none';
						});
					}
					const toggle_private_members = document.getElementById('toggle-private-members')
					toggle_private_members.addEventListener('change', (event) => {
						toggle_private(event.currentTarget.checked);
					})
					document.addEventListener("DOMContentLoaded", function(){
						toggle_private(toggle_private_members.checked);
					});
				</script>
				{% set index = module.docstring | to_markdown | to_html | attr("toc_html") %}
				{% if index %}
					<div class="divider mb-3 is-left">Contents</div>
					<div class="nav-content">
						{{ index | safe }}
					</div>
				{% endif %}
			{% endblock %}

			{% block nav_parent_module %}
				{% set index = namespace() %}
				{% set index.type = 'module' %}
				{% set index.qualname = 'Module Index' %}
				{% set index.name = 'Module Index' %}
				{% set index.content %}
					<li>
						<a href="{{ "../" * module.modulename.count(".") }}index.html" class="p-1">
							{{ symbol_icontext({'name': index.qualname, 'type': 'index'}) }}
						</a>
					</li>
				{% endset %}

				{% set xs = [] %}
				{% set parentmodule = ".".join(module.modulename.split(".")[:-1]) %}
				{% if parentmodule and parentmodule in all_modules %}
					{% set pm = namespace() %}
					{% set pm.type = 'module' %}
					{% set pm.qualname = parentmodule %}
					{% set pm.name = parentmodule.split('.')[-1] %}
					{% set pm.content %}
						<li>
							<a href="../{{ pm.qualname.split(".")[-1] }}.html" class="p-1">
								{{ symbol_icontext(pm, name=pm.qualname + ' (parent)') }}
							</a>
						</li>
					{% endset %}

					{% set xs = [index, pm] %}
				{% elif all_modules %}
					{% set xs = [index] %}
				{% endif %}

				{% if xs %}
					{% call(x) navlist(xs, label="Navigation") %}
						{{ x.content }}
					{% endcall %}
				{% endif %}
			{% endblock %}

			{% block nav_member_list %}
				{{ member_navlist(module.submodules + module.flattened_own_members) }}
			{% endblock %}
		</nav>
	{% endblock %}
{%- endmacro %}
{% macro define_main_content() -%}
	{% block main_content %}
		{% block breadcrumbs %}
			<div class="px-6 my-6">
				{{ breadcrumbs() }}
			</div>
		{% endblock %}
		{% block module_info %}
			<section class="section py-0 my-6">
				<h1 class="title is-3 anchor-title">
					<span class="is-flex-wrap-nowrap">
						{#-
						{% set parts = module.fullname.split(".") %}
						<span class="is-family-monospace">Module <span>{{ '.'.join(parts[:-1]) + ('.' if parts|length > 1 else '') }}</span><span class="has-text-danger">{{ parts[-1] }}</span></span>
						-#}
						<span class="">Module</span>
						<span> </span>
						<span class="is-family-monospace has-text-danger">{{ module.name }}</span>
					</span>
					<a class="anchor-link" href="#">#</a>
				</h1>
				{{ docstring(module) }}
				{{ view_source(module) }}
			</section>
		{% endblock %}
		{% block module_contents %}
			{{ module_content(module.submodules + module.flattened_own_members) }}
		{% endblock %}
	{% endblock %}
{%- endmacro %}
{% block head %}
    {% if math %}{% include "math.html.jinja2" %}{% endif %}
{% endblock %}
{% block body %}
    <div class="sidebar-layout">
		<div class="sidebar-left">
			{{ define_nav() }}
		</div>
		<div class="main-content">
			<main class="container">
				{{ define_main_content() }}
			</main>

			{% if mtime %}
				{% include "livereload.html.jinja2" %}
			{% endif %}
			{% block search_js %}
				{% if search %}
					{% include "search.html.jinja2" %}
				{% endif %}
			{% endblock %}

			{% block footer %}
				<footer>
					{{- footer_text or "" -}}
					{{ attribution() }}
				</footer>
			{% endblock %}
		</div>
	</div>
{% endblock %}
