{# TODO: dark theme switch in top navbar that scrolls away? #}
{% extends "frame.html.jinja2" %}
{% block title %}{{ module.modulename }} API documentation{% endblock %}
{% block style %}
	{{ super() | safe }}
    {% filter minify_css %}
        <style>{% include 'syntax-highlighting.css' %}</style>
        <style>.pdoc-is-private {display: none; }</style>
    {% endfilter %}
{% endblock %}
{% defaultmacro bases(cls) %}
    {%- if cls.bases -%}
        <wbr>(
        {%- for base in cls.bases -%}
            <span class="base">{{ base[:2] | link(text=base[2]) }}</span>
            {%- if loop.nextitem %}, {% endif %}
        {%- endfor -%}
        )
    {%- endif -%}
{% enddefaultmacro %}
{% defaultmacro default_value(var) -%}
    {%- if var.default_value_str -%}
        <span class="default_value">{{ var.default_value_str | escape | linkify }}</span>
    {%- endif -%}
{% enddefaultmacro %}
{% defaultmacro annotation(var) %}
    {%- if var.annotation_str -%}
        <span class="annotation">{{ var.annotation_str | escape | linkify }}</span>
    {%- endif -%}
{% enddefaultmacro %}
{% defaultmacro decorators(doc) %}
    {%- for d in doc.decorators if not d.startswith("@_") -%}
        <div class="decorator">{{ d | escape | linkify }}</div>
    {%- endfor -%}
{% enddefaultmacro %}
{% defaultmacro headerlink(doc) -%}
    <a class="headerlink" href="#{{ doc.qualname }}">#&nbsp;&nbsp</a>
{% enddefaultmacro %}
{% defaultmacro function(fn) -%}
	{# TODO: <div class="attr function">{{ headerlink(fn) }} #}
	<pre class="p-3">
		{{- decorators(fn) -}}
		{%- if fn.name == "__init__" -%}
			{#- no space -#}
			<span class="name">{{ ".".join(fn.qualname.split(".")[:-1]) }}</span>
			{#- no space -#}
			<span class="signature">{{ fn.signature_without_self | escape | linkify }}</span>
			{#- no space -#}
		{%- else -%}
			{#- no space -#}
			<span class="has-text-weight-bold has-text-black">{{ fn.funcdef }}</span>
			{#- no space -#}
			<span class="has-text-weight-bold"> </span>
			{#- no space -#}
			<span class="has-text-weight-bold has-text-danger">{{ fn.name }}</span>
			{#- no space -#}
			<span class="has-text-weight-bold has-text-black">{{ fn.signature | escape | linkify }}</span>
			{#- no space -#}
		{%- endif -%}
	</pre>
{% enddefaultmacro %}
{% defaultmacro variable(var) %}
	<pre class="p-3">
		{#- no space -#}
		<span class="has-text-weight-bold has-text-danger">{{ var.name }}</span>
		{#- no space -#}
		<span class="has-text-weight-bold has-text-black">{{ annotation(var) }}</span>
		{#- no space -#}
		<span class="has-text-weight-bold has-text-black">{{ default_value(var) }}</span>
		{#- no space -#}
	</pre>
{% enddefaultmacro %}
{% defaultmacro submodule(mod) %}
	<pre class="p-3">
		{#- no space -#}
		<span class="icon mr-1"><span class="{{ symbol_icon({'type': 'module', 'qualname': mod.taken_from[0] }) }}"></span></span>
		{#- no space -#}
		<span class="has-text-weight-bold has-text-black">{{ mod.taken_from | link }}</span>
		{#- no space -#}
	</pre>
{% enddefaultmacro %}
{% defaultmacro class(cls) %}
	{# TODO: {{ headerlink(cls) }}#}
	<pre class="p-3">
		{#- no space -#}
		{{- decorators(cls) -}}
		{#- no space -#}
		<span class="has-text-weight-bold has-text-black">class</span>
		{#- no space -#}
		<span class="has-text-weight-bold"> </span>
		{#- no space -#}
		<span class="has-text-weight-bold has-text-danger">{{ cls.qualname }}</span>
		{#- no space -#}
		{{- bases(cls) -}}
	</pre>
{% enddefaultmacro %}
{% defaultmacro member(doc, last, parent=None) %}
	<dt class="{{ hide_private(doc) }} {{ '' if parent else 'mt-6' }}" id="{{ doc.qualname or doc.name }}">
		{% if doc.type == "class" %}
			{{ class(doc) }}
		{% elif doc.type == "function" %}
			{{ function(doc) }}
		{% elif doc.type == "module" %}
			{{ submodule(doc) }}
		{% else %}
			{{ variable(doc) }}
		{% endif %}

		{% if doc.type != "variable" %}
			{{ view_source(doc) }}
		{% endif %}
	</dt>
	{% set docstr = docstring(doc) %}
	{% set xs = [] %}
	{% if doc.type == "class" %}
		{% for x in doc.own_members if x.type != "class" and is_public(x) | trim %}
			{% set _ = xs.append(x) %}
		{% endfor %}
	{% endif %}
	<dd class="{{ hide_private(doc) }} mb-4">
		{% if (doc.type != "class" or xs|length > 0) and docstr %}
			<div class="pl-6 pr-0 py-5">
				{{ docstr }}
				{% if doc.type == "class" %}
					{% for x in xs %}
						<dl>
							{{ member(x, loop.last, parent=doc) }}
						</dl>
					{% endfor %}
					{% set inherited_members = inherited(doc) | trim %}
					{% if inherited_members %}
						<div>
							<h5>Inherited Members</h5>
							{{ inherited_members }}
						</div>
					{% endif %}
				{% endif %}
			</div>
			{% if not parent and doc.type in ["class", "function"] and not last %}<hr>{% endif %}
		{% endif %}
	</dd>
{% enddefaultmacro %}
{% defaultmacro docstring(var) %}
    {% if var.docstring %}
        <div class="block content">{{ var.docstring | to_markdown | to_html | linkify(namespace=var.qualname) }}</div>
    {% endif %}
{% enddefaultmacro %}
{% defaultmacro is_public(doc) %}
	{# This macro has an unfortunate naming, and the name is hard-coded into
	some internal logic. Our intention is to have is_public return true
	for all symbols that should be documented. is_private then used to determine
	whether the symbol is part of the public API or the internal one. #}
    {#
    This macro is a bit unconventional in that its output is not rendered, but treated as a boolean:
    Returning no text is interpreted as false, returning any other text is iterpreted as true.
    Implementing this as a macro makes it very easy to override with a custom template..
    #}
    {% if not doc.name.startswith("__") %}
        {# members not starting with two underscores are considered public by default #}
        true
    {% elif doc.name == "__init__" %}
        {# the constructor is our special case which we also treat as public #}
        true
    {% elif doc.name == "__doc__" %}
        {# Sometimes we have __doc__ in __all__, which we want to exclude for pdoc's purposes. #}
        {# https://github.com/mitmproxy/pdoc/issues/235 #}
    {% elif doc.qualname is in(module.obj.__all__ or []) %}
        {# members are still public if mentioned in __all__ #}
        true
    {% endif %}
{% enddefaultmacro %}
{% defaultmacro is_private(doc) %}
	{# members starting with an underscore are private, except for __init__ #}
    {% if doc.name == "__init__" %}
    {% elif doc.name.startswith("_") %}
        true
    {% endif %}
{% enddefaultmacro %}
{% defaultmacro inherited(cls) %}
    {% for base, members in cls.inherited_members.items() %}
        {% set m = None %}{# workaround for https://github.com/pallets/jinja/issues/1427 #}
        {% set member_html %}
            {% for m in members if is_public(m) | trim %}
                <div id="{{ m.qualname }}" class="{{ m.type }}">
                    {{- m.taken_from | link(text=m.name.replace("__init__",base[1])) -}}
                </div>
            {% endfor %}
        {% endset %}
        {# we may not have any public members, in which case we don't want to print anything. #}
        {% if member_html %}
            <div>{{ base | link }}
                {{ member_html }}
            </div>
        {% endif %}
    {% endfor %}
{% enddefaultmacro %}
{% defaultmacro view_source(doc) %}
    {% if show_source and doc.source %}
        <details>
			{# TODO: fucking webdev. make summary go right without the whole width becoming the button. FFS. float right doesnt work either as the fucking content gets fucking stripped for it then. fuck #}
			<summary class="is-inline-block" style="list-style: none">
				<span class="button is-white is-uppercase has-text-grey is-size-7 has-text-weight-semibold">Expand Source</span>
			</summary>
			{{ doc.source | highlight }}
        </details>
    {% endif %}
{% enddefaultmacro %}
{% macro breadcrumbs() %}
	<nav class="level breadcrumb" aria-label="breadcrumbs">
		<ul>
			{% set parts = module.modulename.split(".") %}
			<li class="{{ 'is-active' if not parts }}">
				<a href="{{ "../" * module.modulename.count(".") }}index.html">
					<span class="icon-text is-flex-wrap-nowrap">
						<span class="icon"><i class="fa-solid fa-list-ul"></i></span>
						<span class="is-family-code">Index</span>
					</span>
				</a>
			</li>
			{% for part in parts %}
				{%- set fullname = ".".join(parts[:loop.index]) -%}
				<li class="{{ 'is-active' if not loop.nextitem else '' }}">
					{%- if fullname in all_modules and fullname != module.modulename -%}
					{% set href = "./" + ("../" * loop.revindex0) + part + ".html" %}
					{%- endif -%}
					<a href="{{ href or "#" }}">
						<span class="icon-text is-flex-wrap-nowrap">
							<span class="icon"><i class="{{ symbol_icon({'type': 'module', 'qualname': fullname}) }}"></i></span>
							<span class="is-family-code">{{part}}</span>
						</span>
					</a>
				</li>
			{% endfor %}
		</ul>
		{% block edit_button %}
			{% if edit_url %}
				<div class="level-right">
					<button class="button is-small is-link is-outlined" href="{{ edit_url }}">
						<span class="icon"><i class="fa-brands fa-github"></i></span>
						<span>Edit</span>
					</button>
				</div>
			{% endif %}
		{% endblock %}
	</nav>
{% endmacro %}
{% defaultmacro symbol_icon(doc) -%}
	{%- if doc.type == "index" -%}
		fa-solid fa-list-ul
	{%- elif doc.type == "module" -%}
		{%- if not doc.submodules and doc.qualname or doc.fullname -%}
			{% set fn = doc.qualname or doc.fullname %}
			{% set submodules = [] %}
			{% for m in all_modules if m.startswith(fn + ".") %}
				{% set _ = submodules.append(m) %}
			{% endfor  %}
		{%- elif doc.submodules -%}
			{% set submodules = doc.submodules %}
		{%- endif -%}

		{%- if submodules|length > 0 -%}
			fa-solid fa-cubes
		{%- else -%}
			fa-solid fa-cube
		{%- endif -%}
	{%- elif doc.type == "variable" -%}
		{# TODO: disccern between class variables and member variables, needs pdoc code. while at it: add pre-splitted and sorted mods,classes,funcs,vars,.. #}
	    fa-solid fa-dice-d6
	{%- elif doc.type == "function" -%}
		{%- if doc.name == "__init__" -%}
			fa-regular fa-circle-dot
		{%- else -%}
			fa-solid fa-circle-dot
		{%- endif -%}
	{%- elif doc.type == "class" -%}
		fa-solid fa-diagram-project
	{%- else -%}
		fa-solid fa-circle-question
	{%- endif -%}
{% enddefaultmacro -%}
{% defaultmacro symbol_name(doc) -%}
	{%- if doc.type == "index" -%}
		{{- doc.name -}}
	{%- elif doc.type == "module" -%}
		{{- doc.qualname or doc.name -}}
	{%- elif doc.type == "variable" -%}
		{{- doc.name -}}
	{%- elif doc.type == "function" -%}
		{%- if doc.name == "__init__" -%}
			{{- doc.qualname.split(".")[-2] -}}
		{%- else -%}
			{{- doc.name -}}
		{%- endif -%}
	{%- elif doc.type == "class" -%}
		{{- doc.qualname or doc.name -}}
	{%- else -%}
		{{- doc.qualname or doc.name -}}
	{%- endif -%}
{% enddefaultmacro -%}
{% defaultmacro symbol_icontext(doc, name=None) -%}
	{% set classes = [] %}
	{% if is_private(doc) %}
		{% set _ = classes.append("has-text-grey-light") %}
	{% endif %}
	<span class="icon-text is-flex-wrap-nowrap {{' '.join(classes)}}">
        <span class="icon"><i class="{{symbol_icon(doc)}}"></i></span>
		<span class="is-family-code">{{name or symbol_name(doc)}}
		{%- if doc.type == "function" -%}
			<span class="has-text-grey-light">()</span>
		{%- endif -%}
		</span>
    </span>
{% enddefaultmacro %}
{% defaultmacro navlist(xs, label=None) -%}
    {% if xs %}
        {% if label %}
		<div class="divider mb-3 is-left">{{ label }}</div>
        {% endif %}
        <ul class="menu-list p-0 m-0">
            {% for m in xs %}
                {{ caller(m) }}
            {% endfor %}
        </ul>
    {% endif %}
{%- enddefaultmacro %}
{% defaultmacro for_member_navlist_filter(members, type, sort=None, label=None, parent=None, nestlevel=0) -%}
	{% set xs = [] %}
	{% for x in members if x.type == type and is_public(x) %}
		{% set _ = xs.append(x) %}
	{% endfor %}
    {% if sort %}
		{% set xs = xs | sort(attribute=sort) %}
	{% endif %}
    {% if xs %}
        {% if label and nestlevel == 0 %}
			<div class="divider mb-3 is-left">{{ label }}</div>
        {% endif %}
        <ul class="menu-list p-0 m-0 {{ "ml-5" if nestlevel > 0 else "" }}" style="border: 0">
            {% for x in xs %}
                {{ caller(x) }}
            {% endfor %}
        </ul>
    {% endif %}
{%- enddefaultmacro %}
{% defaultmacro hide_private(doc) -%}
	{{ 'pdoc-is-private' if is_private(doc) else '' }}
{%- enddefaultmacro %}
{% defaultmacro member_navlist(xs, parent=None, nestlevel=0, except=[]) -%}
	{% if 'module' not in except %}
		{% call(m) for_member_navlist_filter(xs, type="module", sort="name", label="Modules", parent=parent, nestlevel=nestlevel) %}
			<li class="{{ hide_private(m) }}"><a href="#{{ m.name }}" class="p-1">{{ symbol_icontext(m) }}</a></li>
		{% endcall %}
	{% endif %}

	{% if 'variable' not in except %}
		{% call(m) for_member_navlist_filter(xs, type="variable", label="Variables", parent=parent, nestlevel=nestlevel) %}
			<li class="{{ hide_private(m) }}"><a href="#{{ m.qualname }}" class="p-1">{{ symbol_icontext(m) }}</a></li>
		{% endcall %}
	{% endif %}

	{% if 'function' not in except %}
		{% call(m) for_member_navlist_filter(xs, type="function", sort="name", label="Functions", parent=parent, nestlevel=nestlevel) %}
			<li class="{{ hide_private(m) }}"><a href="#{{ m.qualname }}" class="p-1">{{ symbol_icontext(m) }}</a></li>
		{% endcall %}
	{% endif %}

	{% if 'class' not in except %}
		{% call(m) for_member_navlist_filter(xs, type="class", sort="name", label="Classes", parent=parent, nestlevel=nestlevel) %}
			<li class="mt-3 {{ hide_private(m) }}">
				<a href="#{{ m.qualname }}" class="p-1">{{ symbol_icontext(m) }}</a>
				{{ member_navlist(m.own_members, parent=m, nestlevel=nestlevel+1, except=['class']) }}
				{# TODO: with inherited members (make another toggle)
				{{ member_navlist(m.members.values(), parent=m, nestlevel=nestlevel+1, except=['class']) }}
				#}
			</li>
		{% endcall %}
	{% endif %}
{%- enddefaultmacro %}
{% defaultmacro for_member_content_filter(members, type, sort=None) -%}
	{% set xs = [] %}
	{% for x in members if x.type == type and is_public(x) %}
		{% set _ = xs.append(x) %}
	{% endfor %}
    {% if sort %}
		{% set xs = xs | sort(attribute=sort) %}
	{% endif %}

	{% set icon = symbol_icon({'type': type}) %}
	{% if type == "module" %}
		{% set section_name = "Submodules" %}
		{% set section_id = "submodules" %}
	{% elif type == "variable" %}
		{% set section_name = "Variables" %}
		{% set section_id = "variables" %}
	{% elif type == "function" %}
		{% set section_name = "Functions" %}
		{% set section_id = "functions" %}
	{% elif type == "class" %}
		{% set section_name = "Classes" %}
		{% set section_id = "classes" %}
	{% else %}
		{% set section_name = "Unkown Members" %}
		{% set section_id = "unknown_members" %}
	{% endif %}

    {% if xs %}
		<hr class="mx-6">
		<section class="section" id="{{ section_id }}">
			{# TODO: headerlink #}
			<div class="content">
				<h3>
				<span class="icon-text is-flex-wrap-nowrap">
					<span class="icon ml-1 mr-4"><i class="{{ icon }}"></i></span>
					<span class="is-family-monospace">{{ section_name }}</span>
				</span>
				</h3>
			</div>
			<dl>
				{% for x in xs %}
					{{ caller(x, loop.last) }}
				{% endfor %}
			</dl>
		</section>
    {% endif %}
{%- enddefaultmacro %}
{% defaultmacro module_content(xs, except=[]) -%}
	{% if 'module' not in except %}
		{% call(m, last) for_member_content_filter(xs, type="module", sort="name") %}
			{{ member(m, last) }}
		{% endcall %}
	{% endif %}

	{% if 'variable' not in except %}
		{% call(m, last) for_member_content_filter(xs, type="variable") %}
			{{ member(m, last) }}
		{% endcall %}
	{% endif %}

	{% if 'function' not in except %}
		{% call(m, last) for_member_content_filter(xs, type="function", sort="name") %}
			{{ member(m, last) }}
		{% endcall %}
	{% endif %}

	{% if 'class' not in except %}
		{% call(m, last) for_member_content_filter(xs, type="class", sort="name") %}
			{{ member(m, last) }}
		{% endcall %}
	{% endif %}
{%- enddefaultmacro %}
{% macro define_nav() -%}
	{% block nav %}
		{# TODO: the overflow should be hidden if the navbar is fullwidth . #}
		<nav class="menu" style="position: sticky; vertical-align: top; max-height: 100vh; overflow-y: auto; top: 0; bottom: 0; padding: 30px;">
			<div>
				{% block nav_title %}
					{% if logo %}
						{% if logo_link %}<a href="{{ logo_link }}">{% endif %}
						<img src="{{ logo }}" class="logo" alt="project logo"/>
						{% if logo_link %}</a>{% endif %}
					{% endif %}
				{% endblock %}

				{% block nav_search_box %}
					{% if search and all_modules|length > 1 %}
						<p class="control has-icons-right mb-5">
							<input class="input" type="search" placeholder="Search..." required>
							<span class="icon is-small is-right">
								<i class="fa-solid fa-magnifying-glass"></i>
							</span>
						</p>
					{% endif %}
				{% endblock %}

				{% block nav_module_contents %}
					{# TODO: Test this #}
					{% set index = module.docstring | to_markdown | to_html | attr("toc_html") %}
					{% if index %}
						<div class="divider mb-3 is-left">Contents</div>
						{{ index | safe }}
					{% endif %}
				{% endblock %}

				{% block nav_parent_module %}
					{% set parentmodule = ".".join(module.modulename.split(".")[:-1]) %}
					{% if parentmodule and parentmodule in all_modules %}
						{% call(x) navlist([parentmodule], label="Parent Module") %}
							<li>
								<a href="../{{ x.split(".")[-1] }}.html" class="p-1">
									{{ symbol_icontext({'qualname': parentmodule, 'name': x, 'type': 'module'}) }}
								</a>
							</li>
						{% endcall %}
					{% elif all_modules|length > 1 %}
						{% call(x) navlist([parentmodule], label="Navigation") %}
							<li>
								<a href="{{ "../" * module.modulename.count(".") }}index.html" class="p-1">
									{{ symbol_icontext({'name': 'Index', 'type': 'index'}) }}
								</a>
							</li>
						{% endcall %}
					{% endif %}
				{% endblock %}

				{% block nav_submodules %}
					{% call(m) navlist(module.submodules, label="Submodules") %}
						{# TODO: This is really awful. But we require a better link() function to solve it. #}
						{# TODO: Maybe only use normal name not qualname? #}
						{% set lnk = m.taken_from | link %}
						{% set a_tag, rest = lnk.split('">') %}
						{% set _, href = a_tag.split('href="') %}
						{% set name, _ = rest.split('</a>') %}
						<li class="{{ hide_private(m) }}"><a href="{{ href }}" class="p-1">{{ symbol_icontext(m, name=name) }}</a></li>
					{% endcall %}
				{% endblock %}

				{% block nav_member_list %}
					{{ member_navlist(module.flattened_own_members) }}
				{% endblock %}
			</div>
		</nav>
	{% endblock %}
{%- endmacro %}
{% macro define_main_content() -%}
	{% block main_content %}
		{% block breadcrumbs %}
			<div class="p-6">
				{{ breadcrumbs() }}
			</div>
		{% endblock %}
		{% block module_info %}
			<section class="section">
				<div class="content">
					<h3>
					<span class="icon-text is-flex-wrap-nowrap">
						<span class="icon ml-1 mr-4"><i class="{{ symbol_icon(module) }}"></i></span>
						{#-
						{% set parts = module.fullname.split(".") %}
						<span class="is-family-monospace">Module <span>{{ '.'.join(parts[:-1]) + ('.' if parts|length > 1 else '') }}</span><span class="has-text-danger">{{ parts[-1] }}</span></span>
						-#}
						<span class="is-family-monospace">Module <span class="has-text-danger">{{ module.name }}</span></span>
					</span>
					</h3>
				</div>
				{{ docstring(module) }}
				{{ view_source(module) }}
			</section>
		{% endblock %}
		{% block module_contents %}
			{{ module_content(module.submodules) }}
			{{ module_content(module.flattened_own_members) }}
		{% endblock %}
	{% endblock %}
{%- endmacro %}
{% block head %}
    {% if math %}{% include "math.html.jinja2" %}{% endif %}
{% endblock %}
{% block body %}
    <div class="columns is-multiline is-fullheight">
		{# TODO: if long items are in the sidebar, this shit wraps around too early. I want a reasonable automatic size limit for the sidebar. #}
		<div class="column px-3 pb-0">
			{{ define_nav() }}
		</div>
		{# TODO: after wraparound use all the space ffs #}
		<div class="column is-8">
			<main class="container">
				{{ define_main_content() }}
			</main>

			{% if mtime %}
				{% include "livereload.html.jinja2" %}
			{% endif %}
			{% block search_js %}
				{% if search and all_modules|length > 1 %}
					{% include "search.html.jinja2" %}
				{% endif %}
			{% endblock %}

			{% block footer %}
				<footer>
					{{- footer_text or "" -}}
					{{ attribution() }}
				</footer>
			{% endblock %}
		</div>
	</div>
{% endblock %}
